// Copyright (C) 2024 - The Spurte Authors
// 
// The code provided, as well as usage of this code is licensed under the MIT License
//
// For more information, check the LICENSE file at the root of this project, or check https://github.com/nikeokoronkwo/spurte for more information

/// The Common Spurte Options, shared between both the JavaScript/TypeScript (Deno) and the Dart implementation of Spurte.
open module SpurteCommonOptions

typealias SpurteMode = "development" | "production"
typealias SpurteLogLevel = "debug" | "info" | "warn" | "error" | "none"
typealias PackageManager = "npm" | "pnpm" | "yarn" | "bun"

class SpurteServerHttpsOptions {
  /// The path to the https certificate used for creating the https server
  cert: String?

  /// The path to the https key used for creating the https server
  key: String?
}

class SpurteDevOptions {
  /// Whether to bundle external dependencies or import them as-is.
  /// 
  /// Defaults to true, meaning url dependencies are bundled.
  bundleJSDeps: Boolean?

  /// Whether to initiate a full reload upon receiving changes
  /// 
  /// Defaults to false
  fullReload: Boolean?
}

open class SpurteBuildOptions {
  /// The output directory for the build files
  /// 
  /// Defaults to the `dist/` directory
  outdir: String?

  /// Whether to minify output
  /// 
  /// Defaults to `true`
  minify: Boolean?
}

open class SpurteExperimentalOptions {}

/// Shared options for using js or ts in Spurte
///
/// This class is not meant to be used in the common options, but to be implemented and used in the separate implementations
open class SpurteJSSharedOptions {
  /// Whether to make use of a `node_modules` directory
  nodeModulesDir: Boolean?

  /// The package manager used to install the node modules, if any.
  ///
  /// If implemented in JS, this defaults to undefined - meaning none will be used for installing dependencies, and Deno will be used to cache the npm dependencies
  /// Else this defaults to "npm"
  /// 
  /// if `nodeModulesDir` is undefined or false, this option is ignored.
  packageManager: PackageManager?

  /// The CDN to use to cache NPM dependencies during development.
  /// Defaults to undefined for Spurte's own NPM dependency management.
  ///
  /// if `nodeModulesDir` is true, this option is ignored
  cdn: String?(beginsWith("https"));
}

class SpurteServerOptions {
  /// The server port number. Defaults to 8000
  port: Int?(isBetween(0, 9999))

  /// The server hostname. Defaults to "localhost"
  host: String?

  /// HTTPS information that, when provided, can be used for creating a https server
  https: SpurteServerHttpsOptions?
}

/// The root of the spurte project. Defaults to the current working directory
root: String?

/// The base url of the spurte project.
base: String?(startsWith("/")) = "/"

/// The public directory to use for serving public assets. Defaults to `public/`
publicDir: String?(endsWith("/")) = "public/"

/// The base url to serve public assets at. Defaults to `/`
publicRoot: String?(startsWith("/")) = "/"

/// Explicitly set the mode and overwrite the default mode or mode passed via the command line.
mode: SpurteMode?

/// The list of plugins provided for this project, either as a file path or as a package uri
plugins: Listing<String>?

/// Development options, used for customizing development as well as for other dev options.
dev: SpurteDevOptions? = new SpurteDevOptions {
  bundleJSDeps = true
  fullReload = false
}

/// Options for customizing building the project
build: SpurteBuildOptions? = new SpurteBuildOptions {
  outdir = "dist"
  minify = true
}

/// Configure the server options for Spurte's development server
server: SpurteServerOptions? = new SpurteServerOptions {
  port = 8000
  host = "localhost"
}

/// The logging level for the spurte server
logLevel: SpurteLogLevel? = "none"

/// Whether hot module replacement is active on the given project
///
/// Defaults to true
hmr: Boolean? = true

/// Experimental options
experimental: SpurteExperimentalOptions?